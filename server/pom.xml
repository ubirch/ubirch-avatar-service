<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- parent pom -->
    <parent>
        <groupId>com.ubirch.avatar</groupId>
        <artifactId>ubirch-avatar-service</artifactId>
        <version>0.6.7</version>
    </parent>

    <!-- basic info -->
    <artifactId>server</artifactId>
    <name>${project.artifactId}</name>
    <description>server</description>
    <packaging>jar</packaging> <!--needed ???-->


    <dependencies>

        <!-- AVATAR -->

        <dependency>
            <groupId>com.ubirch.avatar</groupId>
            <artifactId>config</artifactId>
            <version>${avatar-parent.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ubirch.avatar</groupId>
            <artifactId>core</artifactId>
            <version>${avatar-parent.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ubirch.avatar</groupId>
            <artifactId>util</artifactId>
            <version>${avatar-parent.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ubirch.avatar</groupId>
            <artifactId>test-base</artifactId>
            <version>${avatar-parent.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.ubirch.avatar</groupId>
            <artifactId>test-tools</artifactId>
            <version>${avatar-parent.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- UBIRCH -->

        <dependency>
            <groupId>com.ubirch.util</groupId>
            <artifactId>ubirch-deep-check-utils_${scala.compat.version}</artifactId>
            <version>${deep-check-utils.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ubirch.util</groupId>
            <artifactId>ubirch-json-utils_${scala.compat.version}</artifactId>
            <version>${json-utils.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ubirch.util</groupId>
            <artifactId>ubirch-rest-akka-http-utils_${scala.compat.version}</artifactId>
            <version>${rest-akka-http-utils.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ubirch.util</groupId>
            <artifactId>ubirch-response-utils_${scala.compat.version}</artifactId>
            <version>${response-utils.version}</version>
        </dependency>

        <!-- EXTERNAL -->

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.13.3</version>
        </dependency>

        <dependency>
            <groupId>org.typelevel</groupId>
            <artifactId>cats-core_${scala.compat.version}</artifactId>
            <version>${cats-core.version}</version>
        </dependency>

        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient</artifactId>
            <version>${prometheus.version}</version>
        </dependency>

        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_hotspot</artifactId>
            <version>${prometheus.version}</version>
        </dependency>

        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_httpserver</artifactId>
            <version>${prometheus.version}</version>
        </dependency>

        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_pushgateway</artifactId>
            <version>${prometheus.version}</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectjweaver.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-api.version}</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback-classic.version}</version>
        </dependency>

        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logback-encoder.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.scala-logging</groupId>
            <artifactId>scala-logging_${scala.compat.version}</artifactId>
            <version>${scala-logging.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-slf4j_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_${scala.compat.version}</artifactId>
            <version>${akka-http.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream-kafka_${scala.compat.version}</artifactId>
            <version>${akka-stream-kafka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream-kafka-testkit_${scala.compat.version}</artifactId>
            <version>${akka-stream-kafka.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-testkit_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.compat.version}</artifactId>
            <version>${scalatest.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>


    <build>
        <sourceDirectory>src/main/scala</sourceDirectory>
        <testSourceDirectory>src/test/scala</testSourceDirectory>

        <plugins>
            <!-- to be able to use scalatest disable surefire (maven test) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <!-- enable scalatest -->
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>${scalatest-maven-plugin.version}</version>
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>WDF TestSuite.txt</filereports>
                </configuration>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--         create and/or push the created docker image -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <buildDirectory>${parent.build.outputDirectory}</buildDirectory>
                    <repository>ubirch/${project.parent.artifactId}</repository>
                    <tag>${build.number}</tag>
                    <buildArgs>
                        <VERSION>${project.parent.version}</VERSION>
                        <BUILD>${build.number}</BUILD>
                        <SERVICE_NAME>${parent.name}</SERVICE_NAME>
                        <JAR_LIBS>target/lib</JAR_LIBS>
                        <JAR_FILE>target/${project.build.finalName}.${project.packaging}</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>

            <!-- copy all dependencies into the target/lib dir for our docker image -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <overWriteReleases>false</overWriteReleases>
                            <includeScope>runtime</includeScope>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- needed, as model-db shall become deployed and the value for skip is defined as true in the parent pom-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven-deploy-plugin.version}</version>
                <configuration>
                    <skip>false</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
