akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = DEBUG
  log-config-on-start = off
  debug {
    receive = on
    autoreceive = on
    lifecycle = on
  }
  http {
    verbose-error-messages = off
    server {
      idle-timeout = 300s
      request-timeout = 60s
      remote-address-header = on
      # The value of the `Server` header to produce.
      # Set to the empty string to disable rendering of the server header.
      server-header = ubirch-avatar-service
      max-connections = 256
      pipelining-limit = 16
      backlog = 100
    }
    host-connection-pool {
      max-connections = 256
      min-connections = 128
      max-open-requests = 512
    }
    client {
      idle-timeout = 300s
      connecting-timeout = 2s
    }
  }
  kafka {
    producer {
      kafka-clients {
        acks = 1
        delivery.timeout.ms = 120000 // 2 minutes(default)
        linger.ms = 10
      }
    }
    consumer {
      kafka-clients {
        max.poll.interval.ms = 300000 // 5 minutes(default)
      }
    }
  }
}

ubirchAvatarService {

  gopipelinename = "noName"
  # this is the name of the Pipeline
  gopipelinename = ${?GO_PIPELINE_NAME}
  gopipelinelabel = "noLabel"
  # this is the run label of the GO_PIPELINE_NAME
  gopipelinelabel = ${?GO_PIPELINE_LABEL}
  gopipelinerev = "noRev"
  # this is the name of the input material of the GO_PIPELINE_NAME
  gopipelinerev = ${?GO_REVISION_GIT}

  enviroment = "local-dev"
  enviroment = ${?ENVID}

  protocol = "http://"
  interface = "localhost"
  // interface = "0.0.0.0"
  port = 8080

  messages {
    //days
    maxage = 30
    //seconds 86400 = 1 day
    signaturecache = 86400
    //    signaturecache = 1
  }

  prometheus {
    interface = "localhost"
    port = 8081
    enabled = true
  }

  udp {
    interface = "localhost"
    port = 9090
  }

  akka {
    actorTimeout = 5
    numberOfFrontendWorkers = 6
    numberOfBackendWorkers = 3
  }

  es {

    defaultPageSize = 10
    largePageSize = 10000

    device {
      index = "ubirch-devices"
    }

    devicetype {
      index = "ubirch-device-type"
    }

    devicestate {
      index = "ubirch-device-state"
    }
  }

  mongo {

    options = "/avatar-service?sslEnabled=false&authSource=admin"
    hostnames = "localhost:27017"
    hosts = "mongodb://"${ubirchAvatarService.mongo.hostnames}${ubirchAvatarService.mongo.options}

    collection {
      avatarState = "avatarState"
    }

  }

  kafka {
    //Always set to false for local developments unless you have a local kafka with ssl support.
    secureConnection = false
    producer {
      bootstrapServers = "localhost:9092"
      bootstrapServersSecure = "localhost:9093"
      truststoreLocation = "src/main/resources/kafka.producer.truststore.jks"
      truststorePassword = "123456"
      keystoreLocation = "src/main/resources/kafka.producer.keystore.jks"
      keystorePassword = "123456"
    }
    consumer {
      bootstrapServers = "localhost:9092"
      bootstrapServersSecure = "localhost:9093"
      trackleEndOfLifeGroup = "end-of-life-consumer-group"
      retryMinBackoff = 5000 // ms
      retryMaxBackoff = 180000 // ms
      retryBackoffFactor = 2
      retryMaxRetries = 3
      parallel = 5
      maxCommit = 5
      truststoreLocation = "src/main/resources/kafka.consumer.truststore.jks"
      truststorePassword = "123456"
      keystoreLocation = "src/main/resources/kafka.consumer.keystore.jks"
      keystorePassword = "123456"
    }
    trackleMsgpackTopic = "ubirch-trackle-msgpack-json"
    trackleEndOfLifeTopic = "ubirch-trackle-end-of-life-json"
  }
}

esHighLevelClient {
  connection {
    host = "localhost"
    port = 9200
    scheme = "http"
    connectionTimeout = -1 #default 1000
    socketTimeout = -1 # default 30.000
    connectionRequestTimeout = -1 # default ?
  }
  bulk {
    bulkActions = 5000
    # bulkSize in mega bytes
    bulkSize = 1 # bulkSize in mega bytes
    flushInterval = 0.05 # flush every x seconds
    concurrentRequests = 2 # connection pooling: max concurrent requests
  }
}


ubirchAvatarService.client {

  host = "http://localhost:8080"

  timeout {
    connect = 15000
    read = 15000
  }
}

ubirch {

  envid = "local-dev"

  trackleAuthToken = "12345"
}

prometheus.akka {
  metric.filters {
    akka-actor {
      //      includes = ["*/user/AVS-**"]
      includes = []
      excludes = ["*/system/**", "*/user/IO-**"]
    }

    akka-router {
      includes = []
      //includes = []
      excludes = []
    }

    akka-dispatcher {
      includes = []
      //      includes = []
      excludes = []
    }

    akka-actor-groups {
      all {
        includes = []
        //        includes = []
        excludes = ["*/system/**", "*/user/IO-**"]
      }
    }
  }
}

crypto {
  ecc {
    // ed25519-sha-512 private key
    signingPrivateKey = "9d445036a5d8be2eb7b965ed4444e8f04c9b7a89445bcc1313a910dac014a9fda2403b92bc9add365b3cd12ff120d020647f84ea6983f98bc4c87e0f4be8cd66"
  }

  sym {
    salt = "superfluffig1337"
  }
}