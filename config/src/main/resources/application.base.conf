akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = DEBUG
  log-config-on-start = off
  debug {
    receive = on
    autoreceive = on
    lifecycle = on
  }
  http {
    verbose-error-messages = off
    server {
      idle-timeout = 300s
      request-timeout = 60s
      remote-address-header = on
      # The value of the `Server` header to produce.
      # Set to the empty string to disable rendering of the server header.
      server-header = ubirch-avatar-service
      max-connections = 256
      pipelining-limit = 16
      backlog = 100
    }
    host-connection-pool {
      max-connections = 256
      min-connections = 128
      max-open-requests = 512
    }
    client {
      idle-timeout = 300s
      connecting-timeout = 2s
    }
  }
}

rediscala {
  loglevel = "INFO"
  rediscala-client-worker-dispatcher {
    mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 512
  }
}

ubirchAvatarService {

  gopipelinename = "noName"
  # this is the name of the Pipeline
  gopipelinename = ${?GO_PIPELINE_NAME}
  gopipelinelabel = "noLabel"
  # this is the run label of the GO_PIPELINE_NAME
  gopipelinelabel = ${?GO_PIPELINE_LABEL}
  gopipelinerev = "noRev"
  # this is the name of the input material of the GO_PIPELINE_NAME
  gopipelinerev = ${?GO_REVISION_GIT}

  enviroment = "local-dev"
  enviroment = ${?ENVID}

  protocol = "http://"
  interface = "localhost"
  // interface = "0.0.0.0"
  port = 8080

  messages {
    //days
    maxage = 30
    //seconds 86400 = 1 day
    signaturecache = 86400
    //    signaturecache = 1
  }

  prometheus {
    interface = "localhost"
    port = 8081
    enabled = true
  }

  udp {
    interface = "localhost"
    port = 9090
  }

  akka {
    actorTimeout = 5
    numberOfFrontendWorkers = 6
    numberOfBackendWorkers = 3
  }

  es {

    defaultPageSize = 10
    largePageSize = 10000

    device {
      index = "ubirch-devices"
      type = "device"
    }

    devicerawdata {
      index = "ubirch-device-raw-data"
      type = "devicemessage"
    }

    devicerawdataAnchored {
      index = "ubirch-device-raw-data-anchored"
      type = "devicemessage"
    }

    devicehistory {
      index = "ubirch-device-history"
      type = "devicedata"
    }

    devicetype {
      index = "ubirch-device-type"
      type = "devicetype"
    }

    devicestate {
      index = "ubirch-device-state"
      type = "devicestate"
    }
  }

  mongo {

    options = "/avatar-service?sslEnabled=false&authSource=admin"
    hostnames = "localhost:27017"
    hosts = "mongodb://"${ubirchAvatarService.mongo.hostnames}${ubirchAvatarService.mongo.options}

    collection {
      avatarState = "avatarState"
    }

  }

  aws {

    region = "EU_WEST_1"
    region = ${?AWS_REGION}

    awsaccesskey = ${?AWS_ACCESS_KEY_ID}
    awssecretaccesskey = ${?AWS_SECRET_ACCESS_KEY}

    queueOwnerId = "822394622731"
    queueOwnerId = ${?AWS_QUEUE_OWNER_ID}

    topics {
      basename = "$aws/things/%s/shadow"
    }

    states {
      desired = "desired"
      reported = "reported"
      delta = "delta"
      timestamp = "timestamp"
    }

    sqs {

      maxMessagesPerPoll = 10

      queues {
        transformer = "local-dev_ubirch_transformer_inbox"
        transformer_out = "local-dev_ubirch_transformer_outbox"
        deviceDataIn = "local-dev_ubirch_chainservice_device_msg_in"
        deviceDataHashIn = "local-dev_ubirch_chainservice_device_msg_hash_in"
        deviceCreation = "local-dev_ubirch_device_created"
      }
    }
    iot {
      env {
        prefix = local
      }
    }
  }

  mqtt {
    broker {
      url = "tcp://localhost:1883"
      // url = "tcp://mq.dev.ubirch.com:1883"
      // url = "tcp://rmq.dev.ubirch.com:1883"
    }
    credentials {
      user = ${?MQTT_USER}
      password = ${?MQTT_PASSWORD}
    }
    queues {
      deviceBaseTopic = "local_dev/ubirch/devices"
      devicesTopicPartIn = "in"
      devicesTopicPartOut = "out"
      devicesTopicPartProcessed = "processed"
    }

    publishProcessed = true
    qos = 1

  }

}

notaryService {
  client {
    url = "http://notary-dev.api.ubirch.com:8080/v1/notaryService/notarize"
    url = ${?UBIRCH_NOTARYSERVICE_URL}
  }
}

esBinaryClient {
  connection {
    hosts = ["localhost:9300"]
    settings = [
      {"cluster.name": "elasticsearch"}
    ]
  }
  bulk {
    bulkActions = 10000
    # bulkSize in mega bytes
    bulkSize = 5
    # flush every x seconds
    flushInterval = 5
    # connection pooling: max concurrent requests
    concurrentRequests = 8
  }
}

ubirchUserService.client.rest.host = "http://localhost:8092"
ubirchKeyService.client.rest.host = "http://localhost:8095"
//ubirchKeyService.client.rest.host = "https://key.demo.ubirch.com"

ubirch {

  envid = "local-dev"

  oidcUtils {

    skipEnvChecking = false
    skipSignatureChecking = true
    # token age in min
    maxTokenAge = 10
    skipTokenAgeCheck = false

    redis {
      updateExpiry = 1800 // seconds (30 minutes)
    }

  }

  redisUtil {
    host = localhost
    port = 6379
    password = ${?REDIS_PASSOWRD}
  }

}

prometheus.akka {
  metric.filters {
    akka-actor {
      //      includes = ["*/user/AVS-**"]
      includes = []
      excludes = ["*/system/**", "*/user/IO-**"]
    }

    akka-router {
      includes = []
      //includes = []
      excludes = []
    }

    akka-dispatcher {
      includes = []
      //      includes = []
      excludes = []
    }

    akka-actor-groups {
      all {
        includes = []
        //        includes = []
        excludes = ["*/system/**", "*/user/IO-**"]
      }
    }
  }
}

crypto {
  ecc {
    // ed25519-sha-512 private key
    signingPrivateKey = "9d445036a5d8be2eb7b965ed4444e8f04c9b7a89445bcc1313a910dac014a9fda2403b92bc9add365b3cd12ff120d020647f84ea6983f98bc4c87e0f4be8cd66"
  }

  sym {
    salt = "superfluffig1337"
  }
}