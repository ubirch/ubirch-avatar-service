include "application.base.conf"

akka {
  loglevel = "DEBUG"
  http {
    server {
      max-connections = 4096
      pipelining-limit = 64
      backlog = 100
    }
    host-connection-pool {
      max-connections = 512
      min-connections = 32
      max-open-requests = 128
    }
  }
  kafka {
    producer {
      kafka-clients {
        acks = 1
        delivery.timeout.ms = 120000 // default(2 minutes)
        delivery.timeout.ms = ${?KAFKA_PROD_DELIVERY_TIMEOUT_MS} // ms
        linger.ms = 0 // default
        linger.ms = ${?KAFKA_PROD_LINGERMS} // ms
      }
    }
    consumer {
      kafka-clients {
        max.poll.interval.ms = 300000 // 5 minutes(default)
        max.poll.interval.ms = ${?KAFKA_CON_MAX_POLL_INTERVAL_MS} // it should be longer than retry_max_backoff
      }
    }
  }
}

ubirchAvatarService {

  interface = "0.0.0.0"
  port = 8080

  prometheus {
    interface = "0.0.0.0"
    port = 8081
  }

  udp {
    interface = 0.0.0.0
    port = 9090
  }

  akka {
    actorTimeout = ${AKKA_ACTOR_TIMEOUT} // seconds
    numberOfFrontendWorkers = 15
    numberOfBackendWorkers = 8
  }

  mongo {
    reactiveMongoOptions = ""
    reactiveMongoOptions = ${?REACTIVE_MONGO_OPTIONS}
    hosts = ${MONGO_URI}${ubirchAvatarService.mongo.reactiveMongoOptions}
  }

  es {
    defaultPageSize = ${?ES_DEFAULT_PAGE_SIZE} #10
    largePageSize = ${?ES_LARGE_PAGE_SIZE}
    device.index = ${?ES_DEVICE_INDEX} #"ubirch-devices"
    devicerawdataAnchored.index = ${?ES_DEVICE_RAW_DATA_ANCHORED_INDEX} #"ubirch-device-raw-data-anchored"
    devicehistory.index = ${?ES_DEVICE_HISTORY_INDEX} #"ubirch-device-history"
    devicetype.index = ${?ES_DEVICE_TYPE_INDEX} #"ubirch-device-type"
    devicestate.index = ${?ES_DEVICE_STATE_INDEX} #"ubirch-device-state"
  }

  kafka {
    secureConnection = ${KAFKA_IS_SECURE_CONNECTION}
    producer {
      bootstrapServersSecure = ${?KAFKA_PROD_BOOTSTRAP_SERVERS_SSL}
      truststoreLocation = ${?KAFKA_PROD_TRUSTSTORE_LOCATION}
      truststorePassword = ${?KAFKA_PROD_TRUSTSTORE_PASS}
      keystoreLocation = ${?KAFKA_PROD_KEYSTORE_LOCATION}
      keystorePassword = ${?KAFKA_PROD_KEYSTORE_PASS}
      bootstrapServers = ${KAFKA_PROD_BOOTSTRAP_SERVERS}
    }
    consumer {
      bootstrapServers = ${KAFKA_CON_BOOTSTRAP_SERVERS}
      bootstrapServersSecure = ${?KAFKA_CON_BOOTSTRAP_SERVERS_SSL}
      trackleEndOfLifeGroup = ${KAFKA_CON_TRACKLE_END_OF_LIFE_GROUP}
      retryMinBackoff = ${KAFKA_CON_RETRY_MIN_BACKOFF}
      retryMaxBackoff = ${KAFKA_CON_RETRY_MAX_BACKOFF}
      retryBackoffFactor = ${KAFKA_BACKOFF_FACTOR}
      retryMaxRetries = ${KAFKA_CON_RETRY_MAX_RETRIES}
      parallel = ${KAFKA_CON_PARALELL}
      maxCommit = ${KAFKA_CON_MAX_COMMIT}
      truststoreLocation = ${?KAFKA_CON_TRUSTSTORE_LOCATION}
      truststorePassword = ${?KAFKA_CON_TRUSTSTORE_PASS}
      keystoreLocation = ${?KAFKA_CON_KEYSTORE_LOCATION}
      keystorePassword = ${?KAFKA_CON_KEYSTORE_PASS}
    }

    trackleEndOfLifeTopic = ${KAFKA_TRACKLE_END_OF_LIFE_TOPIC}
    trackleMsgpackTopic = ${KAFKA_TRACKLE_MSGPACK_TOPIC}
  }
}

esHighLevelClient {
  connection {
    host = ${ES_HOST}
    port = ${ES_PORT}
    scheme = ${ES_SCHEME}
    user = ${ELASTIC_IO_USER}
    password = ${ELASTIC_IO_PASSWORD}
    maxRetries = ${ES_MAX_NUMBER_OF_RETRIES}
    retry_delay_factor = ${ES_DELAY_FACTOR_IN_SECONDS}
    connectionTimeout = ${ES_CONNECTION_TIMEOUT}
    socketTimeout = ${ES_SOCKET_TIMEOUT}
    connectionRequestTimeout = ${ES_CONNECTION_REQUEST_TIMEOUT}
  }
  bulk {
    bulkActions = ${ES_CLIENT_BULK_ACTIONS}
    bulkSize = ${ES_CLIENT_BULK_SIZE} # bulkSize in mega bytes
    flushInterval = ${ES_CLIENT_BULK_FLUSH} # flush every x seconds
    concurrentRequests = ${ES_CLIENT_CONCURRENCY} # connection pooling: max concurrent requests
  }
}

ubirchAvatarService.client.rest.host = ${AVATAR_BASE_URL}

ubirch {

  envid = ${ENVID}
  trackleAuthToken = ${TRACKLE_AUTH_TOKEN}
}

crypto {
  ecc {
    // ed25519-sha-512 private key
    signingPrivateKey = ${SIGNING_PRIVATE_KEY}
  }
}
